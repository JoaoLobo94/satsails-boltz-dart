// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class BoltzDartImpl implements BoltzDart {
  final BoltzDartPlatform _platform;
  factory BoltzDartImpl(ExternalLibrary dylib) => BoltzDartImpl.raw(BoltzDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BoltzDartImpl.wasm(FutureOr<WasmModule> module) => BoltzDartImpl(module as ExternalLibrary);
  BoltzDartImpl.raw(this._platform);
  Future<AllFees> swapFeesStaticMethodApi({required String boltzUrl, required int outputAmount, dynamic hint}) {
    var arg0 = _platform.api2wire_String(boltzUrl);
    var arg1 = _platform.api2wire_u64(outputAmount);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_swap_fees__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_all_fees,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kSwapFeesStaticMethodApiConstMeta,
      argValues: [boltzUrl, outputAmount],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSwapFeesStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "swap_fees__static_method__Api",
        argNames: ["boltzUrl", "outputAmount"],
      );

  Future<BtcLnSwap> newBtcLnSubmarineStaticMethodApi(
      {required String mnemonic,
      required int index,
      required String invoice,
      required Chain network,
      required String electrumUrl,
      required String boltzUrl,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonic);
    var arg1 = _platform.api2wire_u64(index);
    var arg2 = _platform.api2wire_String(invoice);
    var arg3 = api2wire_chain(network);
    var arg4 = _platform.api2wire_String(electrumUrl);
    var arg5 = _platform.api2wire_String(boltzUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_btc_ln_submarine__static_method__Api(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_btc_ln_swap,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kNewBtcLnSubmarineStaticMethodApiConstMeta,
      argValues: [mnemonic, index, invoice, network, electrumUrl, boltzUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBtcLnSubmarineStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_btc_ln_submarine__static_method__Api",
        argNames: ["mnemonic", "index", "invoice", "network", "electrumUrl", "boltzUrl"],
      );

  Future<BtcLnSwap> newBtcLnReverseStaticMethodApi(
      {required String mnemonic,
      required int index,
      required int outAmount,
      required Chain network,
      required String electrumUrl,
      required String boltzUrl,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonic);
    var arg1 = _platform.api2wire_u64(index);
    var arg2 = _platform.api2wire_u64(outAmount);
    var arg3 = api2wire_chain(network);
    var arg4 = _platform.api2wire_String(electrumUrl);
    var arg5 = _platform.api2wire_String(boltzUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_btc_ln_reverse__static_method__Api(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_btc_ln_swap,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kNewBtcLnReverseStaticMethodApiConstMeta,
      argValues: [mnemonic, index, outAmount, network, electrumUrl, boltzUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBtcLnReverseStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_btc_ln_reverse__static_method__Api",
        argNames: ["mnemonic", "index", "outAmount", "network", "electrumUrl", "boltzUrl"],
      );

  Future<int> btcLnTxSizeStaticMethodApi({required BtcLnSwap swap, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_btc_ln_swap(swap);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_btc_ln_tx_size__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kBtcLnTxSizeStaticMethodApiConstMeta,
      argValues: [swap],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBtcLnTxSizeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "btc_ln_tx_size__static_method__Api",
        argNames: ["swap"],
      );

  Future<String> btcLnReverseClaimStaticMethodApi({required BtcLnSwap swap, required int absFee, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_btc_ln_swap(swap);
    var arg1 = _platform.api2wire_u64(absFee);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_btc_ln_reverse_claim__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kBtcLnReverseClaimStaticMethodApiConstMeta,
      argValues: [swap, absFee],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBtcLnReverseClaimStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "btc_ln_reverse_claim__static_method__Api",
        argNames: ["swap", "absFee"],
      );

  Future<LbtcLnSwap> newLbtcLnSubmarineStaticMethodApi(
      {required String mnemonic,
      required int index,
      required String invoice,
      required Chain network,
      required String electrumUrl,
      required String boltzUrl,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonic);
    var arg1 = _platform.api2wire_u64(index);
    var arg2 = _platform.api2wire_String(invoice);
    var arg3 = api2wire_chain(network);
    var arg4 = _platform.api2wire_String(electrumUrl);
    var arg5 = _platform.api2wire_String(boltzUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_lbtc_ln_submarine__static_method__Api(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_lbtc_ln_swap,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kNewLbtcLnSubmarineStaticMethodApiConstMeta,
      argValues: [mnemonic, index, invoice, network, electrumUrl, boltzUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewLbtcLnSubmarineStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_lbtc_ln_submarine__static_method__Api",
        argNames: ["mnemonic", "index", "invoice", "network", "electrumUrl", "boltzUrl"],
      );

  Future<LbtcLnSwap> newLbtcLnReverseStaticMethodApi(
      {required String mnemonic,
      required int index,
      required int outAmount,
      required Chain network,
      required String electrumUrl,
      required String boltzUrl,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonic);
    var arg1 = _platform.api2wire_u64(index);
    var arg2 = _platform.api2wire_u64(outAmount);
    var arg3 = api2wire_chain(network);
    var arg4 = _platform.api2wire_String(electrumUrl);
    var arg5 = _platform.api2wire_String(boltzUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_lbtc_ln_reverse__static_method__Api(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_lbtc_ln_swap,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kNewLbtcLnReverseStaticMethodApiConstMeta,
      argValues: [mnemonic, index, outAmount, network, electrumUrl, boltzUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewLbtcLnReverseStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_lbtc_ln_reverse__static_method__Api",
        argNames: ["mnemonic", "index", "outAmount", "network", "electrumUrl", "boltzUrl"],
      );

  Future<int> lbtcLnTxSizeStaticMethodApi({required LbtcLnSwap swap, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_lbtc_ln_swap(swap);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lbtc_ln_tx_size__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kLbtcLnTxSizeStaticMethodApiConstMeta,
      argValues: [swap],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLbtcLnTxSizeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lbtc_ln_tx_size__static_method__Api",
        argNames: ["swap"],
      );

  Future<String> lbtcLnReverseClaimStaticMethodApi({required LbtcLnSwap swap, required int absFee, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_lbtc_ln_swap(swap);
    var arg1 = _platform.api2wire_u64(absFee);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lbtc_ln_reverse_claim__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kLbtcLnReverseClaimStaticMethodApiConstMeta,
      argValues: [swap, absFee],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLbtcLnReverseClaimStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "lbtc_ln_reverse_claim__static_method__Api",
        argNames: ["swap", "absFee"],
      );

  Future<String> swapStatusStaticMethodApi({required String boltzUrl, required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(boltzUrl);
    var arg1 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_swap_status__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_boltz_error,
      constMeta: kSwapStatusStaticMethodApiConstMeta,
      argValues: [boltzUrl, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSwapStatusStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "swap_status__static_method__Api",
        argNames: ["boltzUrl", "id"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  AllFees _wire2api_all_fees(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AllFees(
      btcLimits: _wire2api_limits(arr[0]),
      lbtcLimits: _wire2api_limits(arr[1]),
      btcSubmarine: _wire2api_submarine_swap_fees(arr[2]),
      btcReverse: _wire2api_reverse_swap_fees(arr[3]),
      lbtcSubmarine: _wire2api_submarine_swap_fees(arr[4]),
      lbtcReverse: _wire2api_reverse_swap_fees(arr[5]),
    );
  }

  BoltzError _wire2api_boltz_error(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BoltzError(
      kind: _wire2api_String(arr[0]),
      message: _wire2api_String(arr[1]),
    );
  }

  BtcLnSwap _wire2api_btc_ln_swap(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return BtcLnSwap(
      id: _wire2api_String(arr[0]),
      kind: _wire2api_swap_type(arr[1]),
      network: _wire2api_chain(arr[2]),
      keys: _wire2api_key_pair(arr[3]),
      preimage: _wire2api_pre_image(arr[4]),
      redeemScript: _wire2api_String(arr[5]),
      invoice: _wire2api_String(arr[6]),
      outAmount: _wire2api_u64(arr[7]),
      outAddress: _wire2api_String(arr[8]),
      electrumUrl: _wire2api_String(arr[9]),
      boltzUrl: _wire2api_String(arr[10]),
    );
  }

  Chain _wire2api_chain(dynamic raw) {
    return Chain.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  KeyPair _wire2api_key_pair(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyPair(
      secretKey: _wire2api_String(arr[0]),
      publicKey: _wire2api_String(arr[1]),
    );
  }

  LbtcLnSwap _wire2api_lbtc_ln_swap(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 12) throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return LbtcLnSwap(
      id: _wire2api_String(arr[0]),
      kind: _wire2api_swap_type(arr[1]),
      network: _wire2api_chain(arr[2]),
      keys: _wire2api_key_pair(arr[3]),
      preimage: _wire2api_pre_image(arr[4]),
      redeemScript: _wire2api_String(arr[5]),
      invoice: _wire2api_String(arr[6]),
      outAmount: _wire2api_u64(arr[7]),
      outAddress: _wire2api_String(arr[8]),
      blindingKey: _wire2api_String(arr[9]),
      electrumUrl: _wire2api_String(arr[10]),
      boltzUrl: _wire2api_String(arr[11]),
    );
  }

  Limits _wire2api_limits(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Limits(
      minimal: _wire2api_u64(arr[0]),
      maximal: _wire2api_u64(arr[1]),
    );
  }

  PreImage _wire2api_pre_image(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PreImage(
      value: _wire2api_String(arr[0]),
      sha256: _wire2api_String(arr[1]),
      hash160: _wire2api_String(arr[2]),
    );
  }

  ReverseSwapFees _wire2api_reverse_swap_fees(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ReverseSwapFees(
      boltzFees: _wire2api_u64(arr[0]),
      lockupFees: _wire2api_u64(arr[1]),
      claimFeesEstimate: _wire2api_u64(arr[2]),
    );
  }

  SubmarineSwapFees _wire2api_submarine_swap_fees(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SubmarineSwapFees(
      boltzFees: _wire2api_u64(arr[0]),
      claimFees: _wire2api_u64(arr[1]),
      lockupFeesEstimate: _wire2api_u64(arr[2]),
    );
  }

  SwapType _wire2api_swap_type(dynamic raw) {
    return SwapType.values[raw as int];
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_chain(Chain raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_swap_type(SwapType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class BoltzDartPlatform extends FlutterRustBridgeBase<BoltzDartWire> {
  BoltzDartPlatform(ffi.DynamicLibrary dylib) : super(BoltzDartWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_BtcLnSwap> api2wire_box_autoadd_btc_ln_swap(BtcLnSwap raw) {
    final ptr = inner.new_box_autoadd_btc_ln_swap_0();
    _api_fill_to_wire_btc_ln_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LbtcLnSwap> api2wire_box_autoadd_lbtc_ln_swap(LbtcLnSwap raw) {
    final ptr = inner.new_box_autoadd_lbtc_ln_swap_0();
    _api_fill_to_wire_lbtc_ln_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_btc_ln_swap(BtcLnSwap apiObj, ffi.Pointer<wire_BtcLnSwap> wireObj) {
    _api_fill_to_wire_btc_ln_swap(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_lbtc_ln_swap(LbtcLnSwap apiObj, ffi.Pointer<wire_LbtcLnSwap> wireObj) {
    _api_fill_to_wire_lbtc_ln_swap(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_btc_ln_swap(BtcLnSwap apiObj, wire_BtcLnSwap wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.kind = api2wire_swap_type(apiObj.kind);
    wireObj.network = api2wire_chain(apiObj.network);
    _api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    _api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    wireObj.redeem_script = api2wire_String(apiObj.redeemScript);
    wireObj.invoice = api2wire_String(apiObj.invoice);
    wireObj.out_amount = api2wire_u64(apiObj.outAmount);
    wireObj.out_address = api2wire_String(apiObj.outAddress);
    wireObj.electrum_url = api2wire_String(apiObj.electrumUrl);
    wireObj.boltz_url = api2wire_String(apiObj.boltzUrl);
  }

  void _api_fill_to_wire_key_pair(KeyPair apiObj, wire_KeyPair wireObj) {
    wireObj.secret_key = api2wire_String(apiObj.secretKey);
    wireObj.public_key = api2wire_String(apiObj.publicKey);
  }

  void _api_fill_to_wire_lbtc_ln_swap(LbtcLnSwap apiObj, wire_LbtcLnSwap wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.kind = api2wire_swap_type(apiObj.kind);
    wireObj.network = api2wire_chain(apiObj.network);
    _api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    _api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    wireObj.redeem_script = api2wire_String(apiObj.redeemScript);
    wireObj.invoice = api2wire_String(apiObj.invoice);
    wireObj.out_amount = api2wire_u64(apiObj.outAmount);
    wireObj.out_address = api2wire_String(apiObj.outAddress);
    wireObj.blinding_key = api2wire_String(apiObj.blindingKey);
    wireObj.electrum_url = api2wire_String(apiObj.electrumUrl);
    wireObj.boltz_url = api2wire_String(apiObj.boltzUrl);
  }

  void _api_fill_to_wire_pre_image(PreImage apiObj, wire_PreImage wireObj) {
    wireObj.value = api2wire_String(apiObj.value);
    wireObj.sha256 = api2wire_String(apiObj.sha256);
    wireObj.hash160 = api2wire_String(apiObj.hash160);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BoltzDartWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BoltzDartWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BoltzDartWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    int ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(int)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_swap_fees__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> boltz_url,
    int output_amount,
  ) {
    return _wire_swap_fees__static_method__Api(
      port_,
      boltz_url,
      output_amount,
    );
  }

  late final _wire_swap_fees__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Uint64)>>(
          'wire_swap_fees__static_method__Api');
  late final _wire_swap_fees__static_method__Api =
      _wire_swap_fees__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_btc_ln_submarine__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    int index,
    ffi.Pointer<wire_uint_8_list> invoice,
    int network,
    ffi.Pointer<wire_uint_8_list> electrum_url,
    ffi.Pointer<wire_uint_8_list> boltz_url,
  ) {
    return _wire_new_btc_ln_submarine__static_method__Api(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_new_btc_ln_submarine__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_btc_ln_submarine__static_method__Api');
  late final _wire_new_btc_ln_submarine__static_method__Api =
      _wire_new_btc_ln_submarine__static_method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_btc_ln_reverse__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    int index,
    int out_amount,
    int network,
    ffi.Pointer<wire_uint_8_list> electrum_url,
    ffi.Pointer<wire_uint_8_list> boltz_url,
  ) {
    return _wire_new_btc_ln_reverse__static_method__Api(
      port_,
      mnemonic,
      index,
      out_amount,
      network,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_new_btc_ln_reverse__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_btc_ln_reverse__static_method__Api');
  late final _wire_new_btc_ln_reverse__static_method__Api = _wire_new_btc_ln_reverse__static_method__ApiPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_btc_ln_tx_size__static_method__Api(
    int port_,
    ffi.Pointer<wire_BtcLnSwap> swap,
  ) {
    return _wire_btc_ln_tx_size__static_method__Api(
      port_,
      swap,
    );
  }

  late final _wire_btc_ln_tx_size__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BtcLnSwap>)>>(
          'wire_btc_ln_tx_size__static_method__Api');
  late final _wire_btc_ln_tx_size__static_method__Api =
      _wire_btc_ln_tx_size__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_BtcLnSwap>)>();

  void wire_btc_ln_reverse_claim__static_method__Api(
    int port_,
    ffi.Pointer<wire_BtcLnSwap> swap,
    int abs_fee,
  ) {
    return _wire_btc_ln_reverse_claim__static_method__Api(
      port_,
      swap,
      abs_fee,
    );
  }

  late final _wire_btc_ln_reverse_claim__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BtcLnSwap>, ffi.Uint64)>>(
          'wire_btc_ln_reverse_claim__static_method__Api');
  late final _wire_btc_ln_reverse_claim__static_method__Api = _wire_btc_ln_reverse_claim__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_BtcLnSwap>, int)>();

  void wire_new_lbtc_ln_submarine__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    int index,
    ffi.Pointer<wire_uint_8_list> invoice,
    int network,
    ffi.Pointer<wire_uint_8_list> electrum_url,
    ffi.Pointer<wire_uint_8_list> boltz_url,
  ) {
    return _wire_new_lbtc_ln_submarine__static_method__Api(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_new_lbtc_ln_submarine__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_lbtc_ln_submarine__static_method__Api');
  late final _wire_new_lbtc_ln_submarine__static_method__Api =
      _wire_new_lbtc_ln_submarine__static_method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_lbtc_ln_reverse__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    int index,
    int out_amount,
    int network,
    ffi.Pointer<wire_uint_8_list> electrum_url,
    ffi.Pointer<wire_uint_8_list> boltz_url,
  ) {
    return _wire_new_lbtc_ln_reverse__static_method__Api(
      port_,
      mnemonic,
      index,
      out_amount,
      network,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_new_lbtc_ln_reverse__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_lbtc_ln_reverse__static_method__Api');
  late final _wire_new_lbtc_ln_reverse__static_method__Api =
      _wire_new_lbtc_ln_reverse__static_method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_lbtc_ln_tx_size__static_method__Api(
    int port_,
    ffi.Pointer<wire_LbtcLnSwap> swap,
  ) {
    return _wire_lbtc_ln_tx_size__static_method__Api(
      port_,
      swap,
    );
  }

  late final _wire_lbtc_ln_tx_size__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LbtcLnSwap>)>>(
          'wire_lbtc_ln_tx_size__static_method__Api');
  late final _wire_lbtc_ln_tx_size__static_method__Api =
      _wire_lbtc_ln_tx_size__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_LbtcLnSwap>)>();

  void wire_lbtc_ln_reverse_claim__static_method__Api(
    int port_,
    ffi.Pointer<wire_LbtcLnSwap> swap,
    int abs_fee,
  ) {
    return _wire_lbtc_ln_reverse_claim__static_method__Api(
      port_,
      swap,
      abs_fee,
    );
  }

  late final _wire_lbtc_ln_reverse_claim__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LbtcLnSwap>, ffi.Uint64)>>(
          'wire_lbtc_ln_reverse_claim__static_method__Api');
  late final _wire_lbtc_ln_reverse_claim__static_method__Api = _wire_lbtc_ln_reverse_claim__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_LbtcLnSwap>, int)>();

  void wire_swap_status__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> boltz_url,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_swap_status__static_method__Api(
      port_,
      boltz_url,
      id,
    );
  }

  late final _wire_swap_status__static_method__ApiPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_swap_status__static_method__Api');
  late final _wire_swap_status__static_method__Api = _wire_swap_status__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_BtcLnSwap> new_box_autoadd_btc_ln_swap_0() {
    return _new_box_autoadd_btc_ln_swap_0();
  }

  late final _new_box_autoadd_btc_ln_swap_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BtcLnSwap> Function()>>('new_box_autoadd_btc_ln_swap_0');
  late final _new_box_autoadd_btc_ln_swap_0 =
      _new_box_autoadd_btc_ln_swap_0Ptr.asFunction<ffi.Pointer<wire_BtcLnSwap> Function()>();

  ffi.Pointer<wire_LbtcLnSwap> new_box_autoadd_lbtc_ln_swap_0() {
    return _new_box_autoadd_lbtc_ln_swap_0();
  }

  late final _new_box_autoadd_lbtc_ln_swap_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LbtcLnSwap> Function()>>('new_box_autoadd_lbtc_ln_swap_0');
  late final _new_box_autoadd_lbtc_ln_swap_0 =
      _new_box_autoadd_lbtc_ln_swap_0Ptr.asFunction<ffi.Pointer<wire_LbtcLnSwap> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_KeyPair extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> secret_key;

  external ffi.Pointer<wire_uint_8_list> public_key;
}

final class wire_PreImage extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> value;

  external ffi.Pointer<wire_uint_8_list> sha256;

  external ffi.Pointer<wire_uint_8_list> hash160;
}

final class wire_BtcLnSwap extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_KeyPair keys;

  external wire_PreImage preimage;

  external ffi.Pointer<wire_uint_8_list> redeem_script;

  external ffi.Pointer<wire_uint_8_list> invoice;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_uint_8_list> out_address;

  external ffi.Pointer<wire_uint_8_list> electrum_url;

  external ffi.Pointer<wire_uint_8_list> boltz_url;
}

final class wire_LbtcLnSwap extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_KeyPair keys;

  external wire_PreImage preimage;

  external ffi.Pointer<wire_uint_8_list> redeem_script;

  external ffi.Pointer<wire_uint_8_list> invoice;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_uint_8_list> out_address;

  external ffi.Pointer<wire_uint_8_list> blinding_key;

  external ffi.Pointer<wire_uint_8_list> electrum_url;

  external ffi.Pointer<wire_uint_8_list> boltz_url;
}
